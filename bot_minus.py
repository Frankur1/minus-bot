import logging
import os
import tempfile
import yt_dlp
import ffmpeg
import subprocess

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# =============================
# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8083958487:AAFBcJBZHMcFdgxSjVEXF5OIdkNEk1ebJUA"
# =============================

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üëã –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è —É–±–µ—Ä—É –≤–æ–∫–∞–ª –∏–∑ –ø–µ—Å–Ω–∏ üé∂")

# ===== –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ =====
async def process_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            input_file = os.path.join(tmpdir, "input.mp4")
            output_file = os.path.join(tmpdir, "output.mp3")

            # ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp ====
            ytdl_opts = {
                "format": "bestaudio/best",
                "outtmpl": input_file,
                "noplaylist": True,      # üëà —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
                "cookiefile": "cookies.txt",
            }

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            with yt_dlp.YoutubeDL(ytdl_opts) as ydl:
                ydl.download([url])

            await update.message.reply_text("üé∂ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

            # ==== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ffmpeg ====
            audio_wav = os.path.join(tmpdir, "audio.wav")
            ffmpeg.input(input_file).output(audio_wav, format="wav", acodec="pcm_s16le", ac=2, ar="44100").overwrite_output().run()

            # ==== –£–±–∏—Ä–∞–µ–º –≤–æ–∫–∞–ª —á–µ—Ä–µ–∑ demucs ====
            await update.message.reply_text("üé§ –£–±–∏—Ä–∞—é –≤–æ–∫–∞–ª (Demucs)... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")

            subprocess.run(
                ["demucs", "--two-stems=vocals", "-o", tmpdir, audio_wav],
                check=True
            )

            # demucs —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
            sep_folder = os.path.join(tmpdir, "htdemucs", "audio")
            no_vocals = os.path.join(sep_folder, "no_vocals.wav")

            if not os.path.exists(no_vocals):
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–µ–∑ –≤–æ–∫–∞–ª–∞")
                return

            # ==== –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ mp3 ====
            ffmpeg.input(no_vocals).output(output_file, format="mp3", audio_bitrate="192k").overwrite_output().run()

            # ==== –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ ====
            await update.message.reply_audio(audio=open(output_file, "rb"))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ===== MAIN =====
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_video))

    logger.info("=== Bot started ===")
    app.run_polling()

if __name__ == "__main__":
    main()
