import os
import tempfile
import subprocess
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ======================
# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω
# ======================
TOKEN = "8083958487:AAFBcJBZHMcFdgxSjVEXF5OIdkNEk1ebJUA"

# ======================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ======================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ======================
# –°—Ç–∞—Ä—Ç
# ======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è –≤—ã–¥–µ–ª—é –≤–æ–∫–∞–ª üé§")


# ======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
# ======================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text
    chat_id = update.message.chat_id

    await update.message.reply_text("üîÑ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...")

    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            input_file = os.path.join(tmpdir, "input.mp4")
            audio_file = os.path.join(tmpdir, "audio.wav")

            # –°–∫–∞—á–∏–≤–∞–µ–º —Å yt-dlp
            cmd_download = [
                "yt-dlp",
                "-f", "bestaudio",
                "-o", input_file,
                url
            ]
            subprocess.run(cmd_download, check=True)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV —á–µ—Ä–µ–∑ ffmpeg
            cmd_ffmpeg = [
                "ffmpeg", "-y",
                "-i", input_file,
                "-vn",
                "-acodec", "pcm_s16le",
                "-ar", "44100",
                "-ac", "2",
                audio_file
            ]
            subprocess.run(cmd_ffmpeg, check=True)

            await update.message.reply_text("üé∂ –†–∞–∑–¥–µ–ª—è—é –≤–æ–∫–∞–ª –∏ –º–∏–Ω—É—Å... (–º–æ–¥–µ–ª—å htdemucs, –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º htdemucs –≤–º–µ—Å—Ç–æ mdx_extra_q (–±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ –º–æ–¥–µ–ª–µ–π)
            subprocess.run(
                ["demucs", "-n", "htdemucs", "--two-stems=vocals", "-o", tmpdir, audio_file],
                check=True
            )

            # –ü—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            song_name = os.path.splitext(os.path.basename(audio_file))[0]
            output_dir = os.path.join(tmpdir, "htdemucs", song_name)

            vocals = os.path.join(output_dir, "vocals.wav")
            no_vocals = os.path.join(output_dir, "no_vocals.wav")

            await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —á–∞—Ç
            if os.path.exists(vocals):
                await context.bot.send_audio(chat_id=chat_id, audio=open(vocals, "rb"))
            if os.path.exists(no_vocals):
                await context.bot.send_audio(chat_id=chat_id, audio=open(no_vocals, "rb"))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# ======================
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ======================
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("=== Bot –∑–∞–ø—É—â–µ–Ω ===")
    app.run_polling()


if __name__ == "__main__":
    main()
