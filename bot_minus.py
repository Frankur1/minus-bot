import logging
import os
import re
import tempfile
import shutil
import subprocess
import shutil
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import yt_dlp

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "–¢–û–ö–ï–ù_–°–Æ–î–ê"   # –í–ü–ò–®–ò –°–í–û–ô
COOKIES_FILE = "cookies.txt"   # –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
# =======================

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)

YOUTUBE_REGEX = re.compile(r'(https?://)?(www\.)?(youtube\.com|youtu\.be)/\S+')


def cleanup_temp():
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ /tmp"""
    temp_dir = "/tmp"
    for root, dirs, files in os.walk(temp_dir):
        for f in files:
            try:
                os.remove(os.path.join(root, f))
            except:
                pass
        for d in dirs:
            try:
                shutil.rmtree(os.path.join(root, d))
            except:
                pass


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    match = YOUTUBE_REGEX.search(text)
    if not match:
        return

    url = match.group(0)
    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    with tempfile.TemporaryDirectory() as tmpdir:
        input_file = os.path.join(tmpdir, "input.mp4")
        audio_file = os.path.join(tmpdir, "audio.wav")
        minus_path = os.path.join(tmpdir, "minus.wav")

        # ==== –°–ö–ê–ß–ò–í–ê–ù–ò–ï —á–µ—Ä–µ–∑ yt-dlp ====
        ydl_opts = {
            "outtmpl": input_file,
            "format": "bestaudio/best",
            "noplaylist": True,
        }
        if os.path.exists(COOKIES_FILE):
            ydl_opts["cookiefile"] = COOKIES_FILE

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return

        # ==== –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í WAV ====
        await update.message.reply_text("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ WAV...")
        ffmpeg_path = shutil.which("ffmpeg")
        if not ffmpeg_path:
            await update.message.reply_text("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
            return

        try:
            subprocess.run(
                [ffmpeg_path, "-y", "-i", input_file, "-vn", "-acodec", "pcm_s16le", "-ar", "44100", "-ac", "2", audio_file],
                check=True
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return

        # ==== Demucs ====
        await update.message.reply_text("üé§ –û—Ç–¥–µ–ª—è—é –≤–æ–∫–∞–ª (Demucs)...")
        try:
            subprocess.run(
                ["demucs", "--two-stems=vocals", "-o", tmpdir, audio_file],
                check=True
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏: {e}")
            return

        # ==== –ò–©–ï–ú –º–∏–Ω—É—Å ====
        real_minus = None
        for root, dirs, files in os.walk(tmpdir):
            for f in files:
                if "no_vocals" in f and f.endswith(".wav"):
                    real_minus = os.path.join(root, f)
                    break

        if not real_minus:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∏–Ω—É—Å–æ–≤–∫—É")
            return

        # ==== –û–¢–ü–†–ê–í–ö–ê –í TG ====
        try:
            with open(real_minus, "rb") as f:
                await update.message.reply_audio(f, title="–ú–∏–Ω—É—Å –≥–æ—Ç–æ–≤ üé∂")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return

    # ==== –ß–∏—Å—Ç–∏–º –º—É—Å–æ—Ä ====
    cleanup_temp()
    await update.message.reply_text("‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã.")


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logging.info("=== Bot started with polling ===")
    app.run_polling()


if __name__ == "__main__":
    main()
